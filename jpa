
package com.wipro.dao;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;
/*
* save(), findById(), findAll(), count(), existsById(), deleteById(), delete(), deleteAll()
*/
import com.wipro.entity.User;
@Repository
public interface UserRepository extends CrudRepository<User,Integer>{
}


—--------------------------------------

package com.wipro.service;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import com.wipro.dao.UserRepository;
import com.wipro.entity.User;
import com.wipro.exception.UserException;
public class UserServiceCrudImpl implements UserService {
	
	@Autowired
	private UserRepository userRepository;
	@Override
	public User getUserById(Integer userid) throws UserException {
		try {
			Optional<User> optional = userRepository.findById(userid);
			if(optional.isEmpty()) {
				throw new UserException("Invalid Userid");
			}
			
			return optional.get();
		}catch(DataAccessException e) {
			throw new UserException(e.getMessage(),e);
		}
		
	}
	@Override
	public List<User> getAllUsers() throws UserException {
		try {
			 Iterable<User> iterable = userRepository.findAll();
			 List<User> userList = new ArrayList<>();
			
			 for(User u: iterable) {
				 userList.add(u);
			 }
			
			if(userList.isEmpty()) {
				throw new UserException("Table is empty");
			}
			
			return userList;
		}catch(DataAccessException e) {
			throw new UserException(e.getMessage(),e);
		}
	}
	@Override
	public User addUser(User user) throws UserException {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public User deleteUser(Integer userID) throws UserException {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public User updateUser(User user) throws UserException {
		// TODO Auto-generated method stub
		return null;
	}
}




//http://localhost:9092/cc/users/1
	@DeleteMapping("/users/{userid}")
	public ResponseEntity<User> deleteUser(@PathVariable(value="userid") Integer userid){
		final String uri = "http://localhost:9091/api/v1/users/{userid}";	  
		
		try {
	
			Map<String, Integer> params = new HashMap<>();
			params.put("userid", userid);
			ResponseEntity<User> user = this.consumeUserById(userid);
			
			restTemplate.delete(uri, params);
			
			return user;
			
		}catch(Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}


	@PutMapping("/users")
	public ResponseEntity<User> updateUser(@RequestBody User user){
		final String uri = "http://localhost:9091/api/v1/users";	  
		try {
	
//			 restTemplate.put(uri, user);
			
			HttpEntity<User> request = new HttpEntity<User>(user);
			
			ResponseEntity<User> response = restTemplate
				       .exchange(uri, HttpMethod.PUT, request,new ParameterizedTypeReference<User>() {});
			
			return response;
		}catch(Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}



package com.wipro.controller;


import java.awt.Menu;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;


import com.wipro.model.User;


/*
 * spring-rest-template application is a consumer application
 * spring-boot-jpa application is producer application
 * 
 * Consumer application makes calls to producer application through RestTemplate object
 */


@RestController
@RequestMapping("/cc")
public class UserConsumerController {
	
	@Autowired
	private RestTemplate restTemplate;


	
	@GetMapping("/users/{userid}")
	public ResponseEntity<User> consumeUserById(@PathVariable(value="userid" )Integer userid){
		//API end-point of producer application
		final String uri = "http://localhost:9091/api/v1/users/{userid}";	   
		try {
			Map<String, Integer> params = new HashMap<>();
			params.put("userid", userid);


			User user = 
					restTemplate.getForObject(uri, User.class, params);
			System.out.println(user);
			return  new ResponseEntity<>(user,HttpStatus.OK);
		}catch(Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}
	
	
	
	@GetMapping("/users")
	public ResponseEntity<List<User>> consumeAllUsers(){
		//API end-point of producer application
		final String uri = "http://localhost:9091/api/v1/users";	   
		try {
			


			 
			ResponseEntity<List<User>> response = restTemplate
				       .exchange(uri, HttpMethod.GET, null,  new ParameterizedTypeReference<List<User>>() {});
			
			
			
			return  response;
		}catch(Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}
	
@PostMapping("/users")
	public ResponseEntity<User> sendUser(@RequestBody User user){
		final String uri = "http://localhost:9091/api/v1/users";	  
		try {
	
			ResponseEntity<User> response = restTemplate.postForEntity(uri, user, User.class);
			
			return  response;
		}catch(Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}
	


	
	
	
}


package com.wipro.controller;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;
import com.wipro.model.User;
/*
* spring-rest-template application is a consumer application
* spring-boot-jpa application is producer application
*
* Consumer application makes calls to producer application through RestTemplate object
*/
@RestController
@RequestMapping("/cc")
public class UserConsumerController {
	
	@Autowired
	private RestTemplate restTemplate;
	
	@GetMapping("/users/{userid}")
	public ResponseEntity<User> consumeUserById(@PathVariable(value="userid" )Integer userid){
		//API end-point of producer application
		final String uri = "http://localhost:9091/api/v1/users/{userid}";	  
		try {
			Map<String, Integer> params = new HashMap<>();
			params.put("userid", userid);
			User user =
					restTemplate.getForObject(uri, User.class, params);
			System.out.println(user);
			return  new ResponseEntity<>(user,HttpStatus.OK);
		}catch(Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}
	
}


//	@Bean
//	public RestTemplate restTemplate() {
//		return new RestTemplate();
//	}
	
	@Bean
	public RestTemplate restTemplate(RestTemplateBuilder builder) {
		return builder.build();
	}


<dependency>
	    		<groupId>org.springframework.boot</groupId>
	    		<artifactId>spring-boot-starter-validation</artifactId>
	   
		</dependency>




—---------------------------------------------------------------


package com.wipro.model;
import org.springframework.stereotype.Component;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@ToString
@Builder
@Component
public class User {
   private Integer userid;
   @NotBlank
   private String username;
   @Size(min = 5)
   private String password;
   @Email
   private String email;
   private Long mobile;
   private Role role;
}







@RestController
@RequestMapping("/api/v1")
//allow any client application to access the API end-points of this RestController
@CrossOrigin(origins = "*")
public class UserController {
	@Autowired
	private UserService userService;
	//http://9091/api/v1/users/1
	@GetMapping("/users/{userid}")
	public User getUserById( @PathVariable(value="userid") Integer userid) {
		try {
			User user = userService.getUserById(userid);
			return user;
		}catch(UserException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	//http://9091/api/v1/users
	@PostMapping("/users")
	public User adUser(User user) {
		try {
			User newUser = userService.addUser(user);
			return newUser;
		}catch(UserException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	
}


package com.wipro.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.wipro.entity.User;
import com.wipro.exception.UserException;
import com.wipro.service.UserService;
@RestController
@RequestMapping("/api/v1")
//allow any client application to access the API end-points of this RestController
@CrossOrigin(origins = "*")
public class UserController {
	@Autowired
	private UserService userService;
	
	@RequestMapping("/users")
	public User getUserById(Integer userid) {
		try {
				User user = userService.getUserById(userid);
				return user;
		}catch(UserException e) {
			e.printStackTrace();
		}
		return null;
	}
}


spring.application.name=spring-boot-jpa
server.port=9091
#server.servlet.contextPath=/springfox

#Data Source
spring.datasource.url= 
spring.datasource.username= 
spring.datasource.password= 
spring.datasource.driverClassName= 

#JPA-	Hibernate properties
spring.jpa.properties.hibernate.dialect= 
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto= update
spring.jpa.hibernate.show-sql=true


management.endpoints.web.exposure.include=*

#Management end-points
#management.endpoint.health.group.custom.include= diskSpace,ping
#management.endpoint.health.group.custom.show-components=always
#management.endpoint.health.group.custom.show-details=always

info.app.name=Spring Boot User Application
info.app.description=This is Spring Boot User REST Application
info.app.version=1.0.0

#spring.resources.add-mappings=true



package com.wipro.aspect;
import java.util.Arrays;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;
import lombok.extern.slf4j.Slf4j;
@Aspect
@Slf4j
@Component
public class UserAspect {
	@Pointcut("execution(* com.wipro.controller.UserController.*(..))")
	public void applicationPackagePointcut() {
	}
	
	@Around("applicationPackagePointcut()")
	public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering method : {}.{}() with argument[s] = {}", joinPoint.getSignature().getDeclaringTypeName(),
						joinPoint.getSignature().getName(), Arrays.toString(joinPoint.getArgs()));
			}
			try {
				//explicitly invoke joinpoint method
				Object result = joinPoint.proceed();
				
				if (log.isDebugEnabled()) {					
					log.debug("Exiting method: {}.{}() with result = {}", joinPoint.getSignature().getDeclaringTypeName(),
							joinPoint.getSignature().getName(), result);
				}
				return result;
			} catch (Exception e) {
				log.error("Error in {}.{}()", joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName());
				log.error(e.getMessage());
				throw e;
			}
		}catch(Exception e) {
			log.error(e.getMessage());
			throw e;
		}
	}
}


