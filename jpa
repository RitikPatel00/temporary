import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
@Entity
@Table(name = "user_charu")
public class User {
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer userid;
	private String username;
	private String password;
	
	
	public User(Integer userid, String username, String password) {
		this.userid = userid;
		this.username = username;
		this.password = password;
	}
	
	public User() {
		
	}
	public Integer getUserid() {
		return userid;
	}
	public void setUserid(Integer userid) {
		this.userid = userid;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	
	
}
[10:19 AM] charulishirsath123@gmail.com (Unverified)
persistence.xml
 
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">
	<persistence-unit name="JPA-Project">
	<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
	<class>com.wipro.entity.User</class>
	
	<properties>
			<property name="javax.persistence.jdbc.url"
				value="jdbc:oracle:thin:@localhost:9501/XE" />
			<property name="javax.persistence.jdbc.user"
				value="system" />
			<property name="javax.persistence.jdbc.password"
				value="rps@123" />
			<property name="javax.persistence.jdbc.driver"
				value="oracle.jdbc.driver.OracleDriver" />
			<property
				name="javax.persistence.schema-generation.database.action"
				value="update" />
			<property name="hibernate.dialect"
				value="org.hibernate.dialect.OracleDialect" />
			<property name="hibernate.show_sql" value="true" />
		</properties>
	
	</persistence-unit>
</persistence>
[10:21 AM] charulishirsath123@gmail.com (Unverified)
App.java
package com.wipro.app;
import com.wipro.entity.User;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import jakarta.persistence.PersistenceException;
public class App {
	public static void main(String[] args) {
		try {
		 EntityManagerFactory emf= 
				Persistence.createEntityManagerFactory("JPA-Project");
		
	EntityManager entityManager=emf.createEntityManager();
	entityManager.getTransaction().begin();
	User user = new User(null,"admin","admin@123");
	entityManager.persist(user);
	System.out.println("User save to databas" );
	entityManager.getTransaction().commit();
		
		}catch(PersistenceException e) {
			e.printStackTrace();
		}
	}
}



<persistence-unit name="employee-management-jpa-app">
	<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
	<class>com.cg.trg.bean.Employee</class>
	<properties>
			<property name="javax.persistence.jdbc.url"
				value="jdbc:postgresql://localhost:5433/empdb" />
			<property name="javax.persistence.jdbc.user"
				value="postgres" />
			<property name="javax.persistence.jdbc.password"
				value="root" />
			<property name="javax.persistence.jdbc.driver"
				value="org.postgresql.Driver" />
			<property
				name="javax.persistence.schema-generation.database.action"
				value="update" />
			<property name="hibernate.dialect"
				value="org.hibernate.dialect.PostgreSQLDialect" />
			<property name="hibernate.show_sql" value="true" />

		</properties>
	
	</persistence-unit>

-Doracle.jdbc.timezoneAsRegion=false

public class Book{
private Long isbn;
private String title;
private String author;
private LocalDate publishDate;
private Double price;


}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration
	xmlns:log4j="http://jakarta.apache.org/log4j/">
	<appender name="A1"
		class="org.apache.log4j.RollingFileAppender">
		<param name="file"
			value="" />
		<param name="MaxFileSize" value="5KB" />
		<param name="MaxBackupIndex" value="2" />
		<!-- <layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern"
				value="%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n" />
		</layout> -->
		<layout class="org.apache.log4j.HTMLLayout">
			<param name="ConversionPattern"
				value="%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n" />
		</layout>
	</appender>
	<appender name="STDOUT"
		class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.SimpleLayout" />
	</appender>
	
	<root>
		<priority value="debug" />
		<appender-ref ref="STDOUT" />
		<appender-ref ref="A1" />
	</root>
</log4j:configuration>

—-----------------------------------------------------------BookServiceImpl—----------------------------
package com.wipro.service;
import java.util.List;
import org.apache.log4j.Logger;
import com.wipro.dao.BookDAO;
import com.wipro.dao.BookDaoImpl;
import com.wipro.entity.Book;
import com.wipro.exception.BookException;
import jakarta.persistence.PersistenceException;
public class BookServiceImpl implements BookService{
	private BookDAO bookDAO = new BookDaoImpl();
	private Logger serviceLogger = Logger.getLogger(BookServiceImpl.class);
	@Override
	public Book getBookById(Long isbn) throws BookException {
		try {
			Book book = bookDAO.getBookById(isbn);
			return book;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public List<Book> getAllBooks() throws BookException {
		try {
			List<Book> bookList = bookDAO.getAllBooks();
			return bookList;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public String addBook(Book book) throws BookException {
		try {
			String status = bookDAO.addBook(book);
			return status;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public String updateBook(Book book) throws BookException {
		try {
			String status = bookDAO.updateBook(book);
			return status;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public String deleteBook(Long isbn) throws BookException {
		try {
			String status = bookDAO.deleteBook(isbn);
			return status;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public List<Book> getBooksByAuthor(String author) throws BookException {
		try {
			List<Book> bookList = bookDAO.getBooksByAuthor(author);
			return bookList;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public List<Book> getBooksByAuthorGreaterThanPrice(String author, Double price) throws BookException {
		try {
			List<Book> bookList = bookDAO.getBooksByAuthorGreaterThanPrice(author, price);
			return bookList;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public List<Book> fetchAllBooks() throws BookException {
		try {
			List<Book> bookList = bookDAO.fetchAllBooks();
			return bookList;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
}

