import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
@Entity
@Table(name = "user_charu")
public class User {
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer userid;
	private String username;
	private String password;
	
	
	public User(Integer userid, String username, String password) {
		this.userid = userid;
		this.username = username;
		this.password = password;
	}
	
	public User() {
		
	}
	public Integer getUserid() {
		return userid;
	}
	public void setUserid(Integer userid) {
		this.userid = userid;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	
	
}
[10:19 AM] charulishirsath123@gmail.com (Unverified)
persistence.xml
 
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">
	<persistence-unit name="JPA-Project">
	<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
	<class>com.wipro.entity.User</class>
	
	<properties>
			<property name="javax.persistence.jdbc.url"
				value="jdbc:oracle:thin:@localhost:9501/XE" />
			<property name="javax.persistence.jdbc.user"
				value="system" />
			<property name="javax.persistence.jdbc.password"
				value="rps@123" />
			<property name="javax.persistence.jdbc.driver"
				value="oracle.jdbc.driver.OracleDriver" />
			<property
				name="javax.persistence.schema-generation.database.action"
				value="update" />
			<property name="hibernate.dialect"
				value="org.hibernate.dialect.OracleDialect" />
			<property name="hibernate.show_sql" value="true" />
		</properties>
	
	</persistence-unit>
</persistence>
[10:21 AM] charulishirsath123@gmail.com (Unverified)
App.java
package com.wipro.app;
import com.wipro.entity.User;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import jakarta.persistence.PersistenceException;
public class App {
	public static void main(String[] args) {
		try {
		 EntityManagerFactory emf= 
				Persistence.createEntityManagerFactory("JPA-Project");
		
	EntityManager entityManager=emf.createEntityManager();
	entityManager.getTransaction().begin();
	User user = new User(null,"admin","admin@123");
	entityManager.persist(user);
	System.out.println("User save to databas" );
	entityManager.getTransaction().commit();
		
		}catch(PersistenceException e) {
			e.printStackTrace();
		}
	}
}



<persistence-unit name="employee-management-jpa-app">
	<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
	<class>com.cg.trg.bean.Employee</class>
	<properties>
			<property name="javax.persistence.jdbc.url"
				value="jdbc:postgresql://localhost:5433/empdb" />
			<property name="javax.persistence.jdbc.user"
				value="postgres" />
			<property name="javax.persistence.jdbc.password"
				value="root" />
			<property name="javax.persistence.jdbc.driver"
				value="org.postgresql.Driver" />
			<property
				name="javax.persistence.schema-generation.database.action"
				value="update" />
			<property name="hibernate.dialect"
				value="org.hibernate.dialect.PostgreSQLDialect" />
			<property name="hibernate.show_sql" value="true" />

		</properties>
	
	</persistence-unit>

-Doracle.jdbc.timezoneAsRegion=false

public class Book{
private Long isbn;
private String title;
private String author;
private LocalDate publishDate;
private Double price;


}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration
	xmlns:log4j="http://jakarta.apache.org/log4j/">
	<appender name="A1"
		class="org.apache.log4j.RollingFileAppender">
		<param name="file"
			value="" />
		<param name="MaxFileSize" value="5KB" />
		<param name="MaxBackupIndex" value="2" />
		<!-- <layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern"
				value="%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n" />
		</layout> -->
		<layout class="org.apache.log4j.HTMLLayout">
			<param name="ConversionPattern"
				value="%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n" />
		</layout>
	</appender>
	<appender name="STDOUT"
		class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.SimpleLayout" />
	</appender>
	
	<root>
		<priority value="debug" />
		<appender-ref ref="STDOUT" />
		<appender-ref ref="A1" />
	</root>
</log4j:configuration>

—-----------------------------------------------------------BookServiceImpl—----------------------------
package com.wipro.service;
import java.util.List;
import org.apache.log4j.Logger;
import com.wipro.dao.BookDAO;
import com.wipro.dao.BookDaoImpl;
import com.wipro.entity.Book;
import com.wipro.exception.BookException;
import jakarta.persistence.PersistenceException;
public class BookServiceImpl implements BookService{
	private BookDAO bookDAO = new BookDaoImpl();
	private Logger serviceLogger = Logger.getLogger(BookServiceImpl.class);
	@Override
	public Book getBookById(Long isbn) throws BookException {
		try {
			Book book = bookDAO.getBookById(isbn);
			return book;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public List<Book> getAllBooks() throws BookException {
		try {
			List<Book> bookList = bookDAO.getAllBooks();
			return bookList;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public String addBook(Book book) throws BookException {
		try {
			String status = bookDAO.addBook(book);
			return status;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public String updateBook(Book book) throws BookException {
		try {
			String status = bookDAO.updateBook(book);
			return status;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public String deleteBook(Long isbn) throws BookException {
		try {
			String status = bookDAO.deleteBook(isbn);
			return status;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public List<Book> getBooksByAuthor(String author) throws BookException {
		try {
			List<Book> bookList = bookDAO.getBooksByAuthor(author);
			return bookList;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public List<Book> getBooksByAuthorGreaterThanPrice(String author, Double price) throws BookException {
		try {
			List<Book> bookList = bookDAO.getBooksByAuthorGreaterThanPrice(author, price);
			return bookList;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public List<Book> fetchAllBooks() throws BookException {
		try {
			List<Book> bookList = bookDAO.fetchAllBooks();
			return bookList;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
}
=====================================



==============================================================================

package com.wipro.entity;
import java.time.LocalDate;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
@Entity
@NamedQueries(
		@NamedQuery(name="fetchAllBooks", query ="select b from Book b")
		)
public class Book {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long isbn;
	private String author;
	private String title;
	private LocalDate publishDate;
	private Double price;
	
	public Book() {
		
	}
	public Book(Long isbn, String author, String title, LocalDate publishDate, Double price) {
		super();
		this.isbn = isbn;
		this.author = author;
		this.title = title;
		this.publishDate = publishDate;
		this.price = price;
	}
	public Long getIsbn() {
		return isbn;
	}
	public void setIsbn(Long isbn) {
		this.isbn = isbn;
	}
	public String getAuthor() {
		return author;
	}
	public void setAuthor(String author) {
		this.author = author;
	}
	public String getTitle() {
		return title;
	}
	public void setTitle(String title) {
		this.title = title;
	}
	public LocalDate getPublishDate() {
		return publishDate;
	}
	public void setPublishDate(LocalDate publishDate) {
		this.publishDate = publishDate;
	}
	public Double getPrice() {
		return price;
	}
	public void setPrice(Double price) {
		this.price = price;
	}
	@Override
	public String toString() {
		return "Book [isbn=" + isbn + ", author=" + author + ", title=" + title + ", publishDate=" + publishDate
				+ ", price=" + price + "]";
	}
	
	
}


=============================================================
package com.wipro.exception;
//custom checked exception
public class BookException extends Exception{
	
	public BookException() {
		super("BookException");
	}
	
	public BookException(String message) {
		super(message);
	}
	
	public BookException(String message, Throwable throwable) {
		super(message,throwable);
	}
	
}


—------------------------------------------------------------
package com.wipro.dao;
import java.util.List;
import com.wipro.entity.Book;
import jakarta.persistence.PersistenceException;
public interface BookDAO {
	public abstract Book getBookById(Long isbn) throws PersistenceException;
	public abstract List<Book> getAllBooks() throws PersistenceException;
	public abstract String addBook(Book book) throws PersistenceException;
	public abstract String updateBook(Book book) throws PersistenceException;
	public abstract String deleteBook(Long isbn) throws PersistenceException;
	
	public abstract List<Book> getBooksByAuthor(String author) throws PersistenceException;
	public abstract List<Book> getBooksByAuthorGreaterThanPrice(String author, Double price) throws PersistenceException;
	public abstract List<Book> fetchAllBooks() throws PersistenceException;
	
}


—----------------------------------------------------------------------------

<!-- https://mvnrepository.com/artifact/log4j/log4j -->
<dependency>
    <groupId>log4j</groupId>
    <artifactId>log4j</artifactId>
    <version>1.2.17</version>
</dependency>

—---------------------------------------------------------------------------log4j.xml—---------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration
	xmlns:log4j="http://jakarta.apache.org/log4j/">
	<appender name="A1"
		class="org.apache.log4j.RollingFileAppender">
		<param name="file"
			value="" />
		<param name="MaxFileSize" value="10MB" />
		<param name="MaxBackupIndex" value="2" />
		<!-- <layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern"
				value="%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n" />
		</layout> -->
		<layout class="org.apache.log4j.HTMLLayout">
			<param name="ConversionPattern"
				value="%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n" />
		</layout>
	</appender>
	<appender name="STDOUT"
		class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.SimpleLayout" />
	</appender>
	
	<root>
		<priority value="info" />
		<appender-ref ref="STDOUT" />
		<appender-ref ref="A1" />
	</root>
</log4j:configuration>

—------------------------------------------------------------------------------------

package com.wipro.dao;
import java.util.List;
import org.apache.log4j.Logger;
import com.wipro.entity.Book;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import jakarta.persistence.PersistenceException;
import jakarta.persistence.Query;
import jakarta.persistence.TypedQuery;
public class BookDaoImpl implements BookDAO{
	private static EntityManagerFactory emf = Persistence.createEntityManagerFactory("jpa-project");
	private static Logger logger = Logger.getLogger(BookDaoImpl.class);
	@Override
	public Book getBookById(Long isbn) throws PersistenceException {
		EntityManager entityManager = null;
		try {
			entityManager = emf.createEntityManager();
			Book book = entityManager.find(Book.class, isbn);
			if(book == null) {
				throw new PersistenceException("Invalid isbn");
			}
			return book;
			
		}catch(PersistenceException e) {
//			e.printStackTrace();
			logger.error(e.getMessage(), e);
			throw e;
		}
	}
	@Override
	public List<Book> getAllBooks() throws PersistenceException {
		EntityManager entityManager = null;
		String jql = "select b from Book b";
		try {
			entityManager = emf.createEntityManager();
			
			TypedQuery<Book> query = entityManager.createQuery(jql,Book.class);
			List<Book> bookList = query.getResultList();
			if(bookList.isEmpty()) {
				throw new PersistenceException("No records in the table");
			}
			return bookList;
		}catch(PersistenceException e) {
//			e.printStackTrace();
			logger.error(e.getMessage(), e);
			throw e;
		}
	}
	@Override
	public String addBook(Book book) throws PersistenceException {
		EntityManager entityManager = null;
		try {
			entityManager = emf.createEntityManager();
			entityManager.getTransaction().begin();
			entityManager.persist(book);
			entityManager.getTransaction().commit();
			return "Book Added To Database";
		}catch(PersistenceException e) {
//			e.printStackTrace();
			logger.error(e.getMessage(), e);
			throw e;
		}
	}
	@Override
	public String updateBook(Book book) throws PersistenceException {
		EntityManager entityManager = null;
		try {
			entityManager = emf.createEntityManager();
			entityManager.getTransaction().begin();
			entityManager.merge(book);
			entityManager.getTransaction().commit();
			return "Book Updated To Database";
		}catch(PersistenceException e) {
//			e.printStackTrace();
			logger.error(e.getMessage(), e);
			throw e;
		}
	}
	@Override
	public String deleteBook(Long isbn) throws PersistenceException {
		EntityManager entityManager = null;
		try {
			entityManager = emf.createEntityManager();
			entityManager.getTransaction().begin();
			Book book = entityManager.find(Book.class, isbn);
			if(book == null) {
				throw new PersistenceException("Invalid isbn");
			}
			entityManager.remove(book);
			entityManager.getTransaction().commit();
			return "Book Deleted From Database";
		}catch(PersistenceException e) {
//			e.printStackTrace();
			logger.error(e.getMessage(), e);
			throw e;
		}
	}
	//named parameter
	@Override
	public List<Book> getBooksByAuthor(String author) throws PersistenceException {
		EntityManager entityManager = null;
		String jql="select b from Book b where b.author= :pauthor";
		try {
			entityManager = emf.createEntityManager();
			TypedQuery<Book> query = entityManager.createQuery(jql,Book.class);
			query.setParameter("pauthor", author);
			List<Book> bookList = query.getResultList();
			if(bookList.isEmpty()) {
				throw new PersistenceException("No books written by "+ author);
			}
			return bookList;
			
		}catch(PersistenceException e) {
//			e.printStackTrace();
			logger.error(e.getMessage(), e);
			throw e;
		}
	}
	//positional parameter
	@Override
	public List<Book> getBooksByAuthorGreaterThanPrice(String author, Double price) throws PersistenceException {
		EntityManager entityManager = null;
		String jql="select b from Book b where b.author= ?1 and b.price > ?2";
		try {
			entityManager = emf.createEntityManager();
			TypedQuery<Book> query = entityManager.createQuery(jql,Book.class);
			query.setParameter(1, author);
			query.setParameter(2, price);
			List<Book> bookList = query.getResultList();
			if(bookList.isEmpty()) {
				throw new PersistenceException("No books written by "+ author + " exceeding Rs."+price);
			}
			return bookList;
			
		}catch(PersistenceException e) {
//			e.printStackTrace();
			logger.error(e.getMessage(), e);
			throw e;
		}
	}
	//named query
	@Override
	public List<Book> fetchAllBooks() throws PersistenceException {
		EntityManager entityManager = null;
		
		try {
			entityManager = emf.createEntityManager();
			
			Query query = entityManager.createNamedQuery("fetchAllBooks");
			List<Book> bookList = query.getResultList();
			if(bookList.isEmpty()) {
				throw new PersistenceException("No records in the table");
			}
			return bookList;
		}catch(PersistenceException e) {
//			e.printStackTrace();
			logger.error(e.getMessage(), e);
			throw e;
		}
	}
}

—---------------------------------------------------------------BookService—----------------
package com.wipro.service;
import java.util.List;
import com.wipro.entity.Book;
import com.wipro.exception.BookException;
public interface BookService {
	public abstract Book getBookById(Long isbn) throws BookException;
	public abstract List<Book> getAllBooks() throws BookException;
	public abstract String addBook(Book book) throws BookException;
	public abstract String updateBook(Book book) throws BookException;
	public abstract String deleteBook(Long isbn) throws BookException;
	
	public abstract List<Book> getBooksByAuthor(String author) throws BookException;
	public abstract List<Book> getBooksByAuthorGreaterThanPrice(String author, Double price) throws BookException;
	public abstract List<Book> fetchAllBooks() throws BookException;
}


—-----------------------------------------------------------BookServiceImpl—----------------------------
package com.wipro.service;
import java.util.List;
import org.apache.log4j.Logger;
import com.wipro.dao.BookDAO;
import com.wipro.dao.BookDaoImpl;
import com.wipro.entity.Book;
import com.wipro.exception.BookException;
import jakarta.persistence.PersistenceException;
public class BookServiceImpl implements BookService{
	private BookDAO bookDAO = new BookDaoImpl();
	private Logger serviceLogger = Logger.getLogger(BookServiceImpl.class);
	@Override
	public Book getBookById(Long isbn) throws BookException {
		try {
			Book book = bookDAO.getBookById(isbn);
			serviceLogger.info("Book: "+isbn +" returned");


			return book;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public List<Book> getAllBooks() throws BookException {
		try {
			List<Book> bookList = bookDAO.getAllBooks();
			return bookList;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public String addBook(Book book) throws BookException {
		try {
			String status = bookDAO.addBook(book);
			return status;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public String updateBook(Book book) throws BookException {
		try {
			String status = bookDAO.updateBook(book);
			return status;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public String deleteBook(Long isbn) throws BookException {
		try {
			String status = bookDAO.deleteBook(isbn);
			return status;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public List<Book> getBooksByAuthor(String author) throws BookException {
		try {
			List<Book> bookList = bookDAO.getBooksByAuthor(author);
			return bookList;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public List<Book> getBooksByAuthorGreaterThanPrice(String author, Double price) throws BookException {
		try {
			List<Book> bookList = bookDAO.getBooksByAuthorGreaterThanPrice(author, price);
			return bookList;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
	@Override
	public List<Book> fetchAllBooks() throws BookException {
		try {
			List<Book> bookList = bookDAO.fetchAllBooks();
			return bookList;
		}catch(PersistenceException e) {
			serviceLogger.error("Error caugth in service layer", e);
			throw new BookException(e.getMessage(),e);
		}
	}
}

—--------------------------------App.java—------------------

package com.wipro.app;
import java.time.LocalDate;
import org.apache.log4j.Logger;
import com.wipro.entity.Book;
import com.wipro.exception.BookException;
import com.wipro.service.BookService;
import com.wipro.service.BookServiceImpl;
//
public class App {
	private static BookService bookService = new BookServiceImpl();
	private static Logger appLogger = Logger.getLogger(App.class);
	
	public static void main(String[] args) {
//		try {
//			String status = bookService.addBook(new Book(null,"Jones","Spring Programming", LocalDate.of(2023, 10,15),550.0));
//			System.out.println(status);
//		}catch(BookException e) {
//			appLogger.error(e.getMessage(), e);
//		}
//		
		
		
		try {
			//invalid isbn
//			Book book = bookService.getBookById(1234L);
			
			//valid isbn
			Book book = bookService.getBookById(1L);
			System.out.println(book);
			
		}catch(BookException e) {
			appLogger.error(e.getMessage(), e);
		}
		
		
		
	}
}



—-----------------------------------------------------------
