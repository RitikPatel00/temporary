package com.wipro.service;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.wipro.dao.UserRepository;
import com.wipro.entity.User;
import com.wipro.exception.UserException;
//The methods of this class invoke CRUDRepositry methods
@Service(value = "userServiceBean")
@Transactional
public class UserServiceCrudImpl implements UserService {
	
	@Autowired
	private UserRepository userRepository;
	@Override
	public User getUserById(Integer userid) throws UserException {
		try {
			Optional<User> optional = userRepository.findById(userid);
			if(optional.isEmpty()) {
				throw new UserException("Invalid Userid");
			}
			System.out.println("The getUserById() of UserServiceCrudImpl class invoked");
			return optional.get();
		}catch(DataAccessException e) {
			throw new UserException(e.getMessage(),e);
		}
		
	}
	@Override
	public List<User> getAllUsers() throws UserException {
		try {
			 Iterable<User> iterable = userRepository.findAll();
			 List<User> userList = new ArrayList<>();
			
			 for(User u: iterable) {
				 userList.add(u);
			 }
			
			if(userList.isEmpty()) {
				throw new UserException("Table is empty");
			}
			
			return userList;
		}catch(DataAccessException e) {
			throw new UserException(e.getMessage(),e);
		}
	}
	@Override
	public User addUser(User user) throws UserException {
		try {
			User newUser = userRepository.save(user);
			return newUser;
		}catch(DataAccessException e) {
			throw new UserException(e.getMessage(),e);
		}
	}
	@Override
	public User deleteUser(Integer userID) throws UserException {
		try {
			User user = this.getUserById(userID);
			
			userRepository.deleteById(userID);
			return user;
		}catch(DataAccessException e) {
			throw new UserException(e.getMessage(),e);
		}
	}
	@Override
	public User updateUser(User user) throws UserException {
		try {
			User newUser = userRepository.save(user);
			return newUser;
		}catch(DataAccessException e) {
			throw new UserException(e.getMessage(),e);
		}
	}
}





—---------------------------------------------

package com.wipro.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.wipro.entity.User;
import com.wipro.exception.UserException;
import com.wipro.service.UserService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/v1")
//allow any client application to access the API end-points of this RestController
@CrossOrigin(origins = "*")
public class UserController {
	
	
	// Autowired byType, UserServiceImpl bean is injected
//	@Autowired
//	private UserService userService;
	
	
	// Autowired byName, UserServiceCrudImpl bean is injected
	@Autowired(required = false)
	@Qualifier(value = "userServiceBean")
	private UserService userService;

	//http://localhost:9091/api/v1/users/1
	@GetMapping("/users/{userid}")
	public ResponseEntity<User> getUserById( @PathVariable(value="userid") Integer userid) {
		try {
			User user = userService.getUserById(userid);
			return new ResponseEntity<>(user, HttpStatus.OK);
		}catch(UserException e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
		
	}

	/*
	 * {
        "userid": null,
        "username": "srini",
        "password": "srini@123",
        "email": "srini@gmail.com",
        "mobile": 9976567680,
        "role": "USER"
  		}
	 */
	//http://9091/api/v1/users
	/*
	 * Validate User object coming from the client before saving to database
	 */
	@PostMapping("/users")
	public ResponseEntity<User> addUser(@Valid @RequestBody User user, BindingResult bindingResult) {
		try {
			if(bindingResult.hasErrors()) {
				throw new UserException(bindingResult.getAllErrors().toString());
			}
			
			User newUser = userService.addUser(user);
			return new ResponseEntity<>(newUser,HttpStatus.OK);
		}catch(UserException e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
		
	}


	//http://9091/api/v1/users
	@GetMapping("/users")
	public ResponseEntity<List<User>> getAllUsers() {
		try {
			List<User> userList = userService.getAllUsers();
			return new ResponseEntity<>(userList,HttpStatus.OK);
		}catch(UserException e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
		
	}
	
	@PutMapping("/users")
	public ResponseEntity<User> updateUser( @Valid  @RequestBody User user, BindingResult bindingResult){
		try {
			if(bindingResult.hasErrors()) {
				throw new UserException(bindingResult.getAllErrors().toString());
			}
			
			User updatedUser = userService.updateUser(user);
			return new ResponseEntity<>(updatedUser,HttpStatus.OK);
		}catch(UserException e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}
	
	@DeleteMapping("/users/{userid}")
	public ResponseEntity<User> deleteUser( @PathVariable(value="userid") Integer userid) {
		try {
			User deletedUser = userService.deleteUser(userid);
			return new ResponseEntity<>(deletedUser, HttpStatus.OK);
		}catch(UserException e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
		
	}

}

—---------------------------------------------
