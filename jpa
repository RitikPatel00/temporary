spring.application.name=spring-boot-jpa
server.port=9091
#server.servlet.contextPath=/springfox

#Data Source
spring.datasource.url= 
spring.datasource.username= 
spring.datasource.password= 
spring.datasource.driverClassName= 

#JPA-	Hibernate properties
spring.jpa.properties.hibernate.dialect= 
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto= update
spring.jpa.hibernate.show-sql=true


management.endpoints.web.exposure.include=*

#Management end-points
#management.endpoint.health.group.custom.include= diskSpace,ping
#management.endpoint.health.group.custom.show-components=always
#management.endpoint.health.group.custom.show-details=always

info.app.name=Spring Boot User Application
info.app.description=This is Spring Boot User REST Application
info.app.version=1.0.0

#spring.resources.add-mappings=true



package com.wipro.aspect;
import java.util.Arrays;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;
import lombok.extern.slf4j.Slf4j;
@Aspect
@Slf4j
@Component
public class UserAspect {
	@Pointcut("execution(* com.wipro.controller.UserController.*(..))")
	public void applicationPackagePointcut() {
	}
	
	@Around("applicationPackagePointcut()")
	public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering method : {}.{}() with argument[s] = {}", joinPoint.getSignature().getDeclaringTypeName(),
						joinPoint.getSignature().getName(), Arrays.toString(joinPoint.getArgs()));
			}
			try {
				//explicitly invoke joinpoint method
				Object result = joinPoint.proceed();
				
				if (log.isDebugEnabled()) {					
					log.debug("Exiting method: {}.{}() with result = {}", joinPoint.getSignature().getDeclaringTypeName(),
							joinPoint.getSignature().getName(), result);
				}
				return result;
			} catch (Exception e) {
				log.error("Error in {}.{}()", joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName());
				log.error(e.getMessage());
				throw e;
			}
		}catch(Exception e) {
			log.error(e.getMessage());
			throw e;
		}
	}
}


